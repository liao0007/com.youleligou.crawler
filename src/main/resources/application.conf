akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  //  log-config-on-start = on

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  //  stdout-loglevel = "DEBUG"

  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  actor {
    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on
      # enable DEBUG logging of unhandled messages
      unhandled = on
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on
    }
  }
  remote {
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = on
    # If this is "on", Akka will log all inbound messages at DEBUG level,
    # if off then they are not logged
    log-received-messages = on
    # Logging of message types with payload size in bytes larger than
    # this value. Maximum detected size per message type is logged once,
    # with an increase threshold of 10%.
    # By default this feature is turned off. Activate it by setting the property to
    # a value in bytes, such as 1000b. Note that for all messages larger than this
    # limit there will be extra performance and scalability cost.
    log-frame-size-exceeding = 1000b
  }
}

cache {
  #redis config
  redis {
    host=localhost
    port=6379
    password=19901008Zjj
    #url排重缓存时间,单位为s
    expire=100
  }
}

crawler {
  #appName akka ActorSystem name
  appName=com-youleligou-crawler
  # seed config
  seed = [
    "http://waimai.baidu.com"
    //    "http://www.sina.com.cn",
    //    "http://www.baidu.com",
    //    "http://www.163.com",
    //    "http://www.sohu.com",
    //    "http://www.ifeng.com",
    //    "http://www.autohome.com.cn/beijing",
    //    "http://bj.fang.com",
    //    "http://blog.csdn.net",
    //    "http://www.gc-zb.com"
  ]

  actor {
    inject {
      #并行度
      parallel = 1
    }

    parse {
      #并行度
      parallel = 1
    }

    count {
      #并行度
      parallel = 1
    }

    fetch {
      #并行度
      parallel = 10
      #爬取url超时时间
      timeout=5000
      #网页友好访问时间
      friendtime=1000
      #爬虫爬取深度
      deep = 2
      #爬取网页使用的useragent
      userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/604.1.12 (KHTML, like Gecko) Version/10.2 Safari/604.1.12"
      timeout = 10000
      poolSize = 100
      #代理
      proxy {
        host = "www.liao0007.com"
        port = 5566
      }
    }

    index {
      #并行度
      parallel = 1
      #索引网页时候elasticsearch host
      es.host=115.29.47.216
      #es port
      es.port=9300
      #es index name
      es.name=page
      #es index type
      es.type=html
    }
  }

}